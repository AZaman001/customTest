# This references the default Python container from
# the Docker Hub with the 3.7-slim tag
box: 
    id: python:3.7-alpine3.8
    ports:
    - "5000"

dev:
  steps:
    - pip-install
    - internal/watch:
        code: python flaskTest.py
        reload: true


build:
  # The steps that will be executed on build
  steps:
    # A step that executes `pip install` command
    - pip-install
    # A custom script step, name value is used in the UI
    # and the code value contains the command that get executed
    - script:
        name: python unit test
        code: |
          python flaskTest_test.py

    - internal/docker-build:
      dockerfile: Dockerfile
      image-name: my-new-image
      registry-auth-config: |
      {
        $DOCKER_REGISTRY: {
          "username": $DOCKER_USERNAME,
          "password": $DOCKER_PASSWORD
      }
    }
    
# push to OCIR, instead of DockerHub using the correct creds to an existing repo!
# testing some things
push-release:
  steps:
    - internal/docker-push:
        image-name: my-new-image
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
        repository: $DOCKER_REPO
        registry: $DOCKER_REGISTRY
        tag: $WERCKER_GIT_BRANCH-$WERCKER_GIT_COMMIT
        working-dir: /pipeline/source
        ports: $PORT
        env: PORT=$PORT
        cmd: python flaskTest.py

#Deploy our container from the Oracle Container Registry to the Oracle Container Engine (Kubernetes)
deploy-to-OKE:
    box:
        id: alpine
        entrypoint: /bin/sh -c
    steps:

    - bash-template

    - script:
        name: "Visualise Kubernetes config"
        code: cat kubernetes.yml

    - kubectl:
        name: deploy to kubernetes
        server: $KUBERNETES_MASTER
        #username: $KUBERNETES_USERNAME
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f kubernetes.yml